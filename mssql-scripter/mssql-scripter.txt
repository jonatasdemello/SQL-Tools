-------------------------------------------------------------------------------------------------------------------------------
mssql-scripter
-------------------------------------------------------------------------------------------------------------------------------
For those looking for a command-line version, Microsoft released mssql-scripter to do this:

https://blogs.technet.microsoft.com/dataplatforminsider/2017/05/17/try-new-sql-server-command-line-tools-to-generate-t-sql-scripts-and-monitor-dynamic-management-views/

https://cloudblogs.microsoft.com/sqlserver/2017/05/17/try-new-sql-server-command-line-tools-to-generate-t-sql-scripts-and-monitor-dynamic-management-views/

Wiki:

https://github.com/microsoft/mssql-scripter/tree/dev

https://github.com/microsoft/mssql-scripter/blob/dev/doc/usage_guide.md


$ pip install --user mssql-scripter

$ pip install mssql-scripter

$ mssql-scripter -h

# Here are some example commands

# Generate DDL scripts for all database objects (default) in the Adventureworks database and output to stdout
$ mssql-scripter -S localhost -d AdventureWorks -U sa

# Generate DDL scripts for all database objects and DML scripts (INSERT statements) for all tables in the Adventureworks database and save the script to a file
$ mssql-scripter -S localhost -d AdventureWorks -U sa ––schema-and-data > ./adventureworks.sql

# generate DDL scripts for objects that contain “Employee” in their name to stdout
$ mssql-scripter -S localhost -d AdventureWorks -U sa ––include-objects Employee


# Generate DDL scripts for all database objects and DML scripts (INSERT statements)
# for all tables in the Adventureworks database and save the script files in
# the current directory

$ mssql-scripter -S localhost -d AdventureWorks -U sa --schema-and-data -f './' --file-per-object


mssql-scripter -S .\sql2016 -d WideWorldImporters --include-objects sales.CustomerCategories

mssql-scripter -S .\sql2016 -d WideWorldImporters --include-objects sales.CustomerCategories -f c:\test\sales_CustCategory.sql

mssql-scripter -S .\sql2016 -d WideWorldImporters --data-only --include-objects sales.CustomerCategories


mssql-scripter -S localhost -U Spock -P P@ssw0rd -d cms_dev --include-objects dbo.translationlanguage --data-only





-------------------------------------------------------------------------------------------------------------------------------
$ mssql-scripter -h
usage: mssql-scripter [-h] [--connection-string  | -S ] [-d] [-U] [-P] [-f]
                  [--file-per-object] [--data-only | --schema-and-data]
                  [--script-create | --script-drop | --script-drop-create]
                  [--target-server-version {2005,2008,2008R2,2012,2014,2016,vNext,AzureDB,AzureDW}]
                  [--target-server-edition {Standard,Personal,Express,Enterprise,Stretch}]
                  [--include-objects [[...]]] [--exclude-objects [[...]]]
                  [--include-schemas [[...]]] [--exclude-schemas [[...]]]
                  [--include-types [[...]]] [--exclude-types [[...]]]
                  [--ansi-padding] [--append] [--check-for-existence] [-r]
                  [--convert-uddts] [--include-dependencies]
                  [--exclude-headers] [--constraint-names]
                  [--unsupported-statements]
                  [--disable-schema-qualification] [--bindings]
                  [--collation] [--exclude-defaults]
                  [--exclude-extended-properties] [--logins]
                  [--object-permissions] [--owner]
                  [--exclude-use-database] [--statistics]
                  [--change-tracking] [--exclude-check-constraints]
                  [--data-compressions] [--exclude-foreign-keys]
                  [--exclude-full-text-indexes] [--exclude-indexes]
                  [--exclude-primary-keys] [--exclude-triggers]
                  [--exclude-unique-keys] [--display-progress]
                  [--enable-toolsservice-logging] [--version]

Microsoft SQL Server Scripter Command Line Tool. Version 1.0.0a14

optional arguments:
  -h, --help            show this help message and exit
  --connection-string   Connection string of database to script. If connection
                        string and server are not supplied, defaults to value
                        in environment variable
                        MSSQL_SCRIPTER_CONNECTION_STRING.
  -S , --server         Server name.
  -d , --database       Database name.
  -U , --user           Login ID for server.
  -P , --password       If not supplied, defaults to value in environment
                        variable MSSQL_SCRIPTER_PASSWORD.
  -f , --file-path      File to script out to or directory name if scripting
                        file per object.
  --file-per-object     By default script to a single file. If supplied and
                        given a directory for --file-path, script a file per
                        object to that directory.
  --data-only           By default only the schema is scripted. if supplied,
                        generate scripts that contains data only.
  --schema-and-data     By default only the schema is scripted. if supplied,
                        generate scripts that contain schema and data.
  --script-create       Script object CREATE statements.
  --script-drop         Script object DROP statements.
  --script-drop-create  Script object CREATE and DROP statements.
  --target-server-version {2005,2008,2008R2,2012,2014,2016,vNext,AzureDB,AzureDW}
                        Script only features compatible with the specified SQL
                        Version.
  --target-server-edition {Standard,Personal,Express,Enterprise,Stretch}
                        Script only features compatible with the specified SQL
                        Server database edition.
  --include-objects [ [ ...]]
                        Database objects to include in script.
  --exclude-objects [ [ ...]]
                        Database objects to exclude from script.
  --include-schemas [ [ ...]]
                        Database objects of this schema to include in script.
  --exclude-schemas [ [ ...]]
                        Database objects of this schema to exclude from
                        script.
  --include-types [ [ ...]]
                        Database objects of this type to include in script.
  --exclude-types [ [ ...]]
                        Database objects of this type to exclude from script.
  --ansi-padding        Generates ANSI Padding statements.
  --append              Append script to file.
  --check-for-existence
                        Check that an object with the given name exists before
                        dropping or altering or that an object with the given
                        name does not exist before creating.
  -r, --continue-on-error
                        Continue scripting on error.
  --convert-uddts       Convert user-defined data types to base types.
  --include-dependencies
                        Generate script for the dependent objects for each
                        object scripted.
  --exclude-headers     Exclude descriptive headers for each object scripted.
  --constraint-names    Include system constraint names to enforce declarative
                        referential integrity.
  --unsupported-statements
                        Include statements in the script that are not
                        supported on the target SQL Server Version.
  --disable-schema-qualification
                        Do not prefix object names with the object schema.
  --bindings            Script options to set binding options.
  --collation           Script the objects that use collation.
  --exclude-defaults    Do not script the default values.
  --exclude-extended-properties
                        Exclude extended properties for each object scripted.
  --logins              Script all logins available on the server, passwords
                        will not be scripted.
  --object-permissions  Generate object-level permissions.
  --owner               Script owner for the objects.
  --exclude-use-database
                        Do not generate USE DATABASE statement.
  --statistics          Script all statistics.
  --change-tracking     Script the change tracking information.
  --exclude-check-constraints
                        Exclude check constraints for each table or view
                        scripted.
  --data-compressions   Script the data compression information.
  --exclude-foreign-keys
                        Exclude foreign keys for each table scripted.
  --exclude-full-text-indexes
                        Exclude full-text indexes for each table or indexed
                        view scripted.
  --exclude-indexes     Exclude indexes (XML and clustered) for each table or
                        indexed view scripted.
  --exclude-primary-keys
                        Exclude primary keys for each table or view scripted.
  --exclude-triggers    Exclude triggers for each table or view scripted.
  --exclude-unique-keys
                        Exclude unique keys for each table or view scripted.
  --display-progress    Display scripting progress.
  --enable-toolsservice-logging
                        Enable verbose logging.
  --version             show program's version number and exit


# Examples:

Dump database object schema

# generate DDL scripts for all objects in the Adventureworks database and save the script to a file

mssql-scripter -S localhost -d AdventureWorks -U sa

# alternatively, specify the schema only flag to generate DDL scripts for all objects in the Adventureworks database and save the script to a file

mssql-scripter -S localhost -d AdventureWorks -U sa -f ./adventureworks.sql

Dump database object data

# generate DDL scripts for all objects in the Adventureworks database and save the script to stdout.

mssql-scripter -S localhost -d AdventureWorks -U sa --data-only

Dump the database object schema and data

# script the database schema and data piped to a file.

mssql-scripter -S localhost -d AdventureWorks -U sa --schema-and-data  > ./adventureworks.sql

# execute the generated above script with sqlcmd

sqlcmd -S mytestserver -U sa -i ./adventureworks.sql

Include database objects

# generate DDL scripts for objects that contain 'Employee' in their name to stdout

mssql-scripter -S localhost -d AdventureWorks -U sa --include-objects Employee

# generate DDL scripts for the dbo schema and pipe the output to a file

mssql-scripter -S localhost -d AdventureWorks -U sa --include-objects dbo. > ./dboschema.sql

Exclude database objects

# generate DDL scripts for objects that do not contain 'Sale' in their name to stdout

mssql-scripter -S localhost -d AdventureWorks -U sa --exclude-objects Sale

Include database object types

# generate DDL scripts for stored procedures to stdout  
# The list of object types is specified in the DatabaseObjectTypes Enum of Microsoft.SqlServer.Management.Smo 
# https://docs.microsoft.com/en-us/dotnet/api/microsoft.sqlserver.management.smo.databaseobjecttypes?view=sql-smo-160

mssql-scripter -S localhost -d AdventureWorks -U sa --include-types StoredProcedure

Target server version

# specify the version of SQL Server the script will be run against

mssql-scripter -S myServer -d AdventureWorks -U myUser –-target-server-version "AzureDB" > myData.sql

Target server edition

# specify the edition of SQL Server the script will be run against
mssql-scripter -S localhost -d AdventureWorks -U myUser –-target-server-edition "Enterprise" > myData.sql

Pipe a generated script to sed

Note this example is for Linux and macOS usage.

# change a schema name in the generated DDL script
# 1) generate DDL scripts for all objects in the Adventureworks database
# 2) pipe generated script to sed and change all occurrences of SalesLT to SalesLT_test and save the script to a file
$ mssql-scripter -S localhost -d Adventureworks -U sa | sed -e "s/SalesLT./SalesLT_test./g" > adventureworks_SalesLT_test.sql 

Script data to a file

# script all the data to a file.
mssql-scripter -S localhost -d AdventureWorks -U sa --data-only > ./adventureworks-data.sql 

Environment Variables

You can set environment variables for your connection string through the following steps:

# (linux/bash)
# set environment variable MSSQL_SCRIPTER_CONNECTION_STRING with a connection string.
$ export MSSQL_SCRIPTER_CONNECTION_STRING='Server=myserver;Database=mydb;User Id=myuser;Password=mypassword;'
$ mssql-scripter

# (linux/bash)
# set environment variable MSSQL_SCRIPTER_PASSWORD so no password input is required.
$ export MSSQL_SCRIPTER_PASSWORD='[PLACEHOLDER]'
$ mssql-scripter -S localhost -d AdventureWorks -U sa

# (windows)
# set environment variable MSSQL_SCRIPTER_CONNECTION_STRING with a connection string.
$Env:MSSQL_SCRIPTER_CONNECTION_STRING = 'Server=myserver;Database=mydb;User Id=myuser;Password=mypassword;'
mssql-scripter

# (windows)
# set environment variable MSSQL_SCRIPTER_PASSWORD so no password input is required.
$Env:MSSQL_SCRIPTER_PASSWORD = "placeholder"
mssql-scripter -S localhost -d AdventureWorks -U sa




-------------------------------------------------------------------------------------------------------------------------------
dbatools.io
-------------------------------------------------------------------------------------------------------------------------------

dbatools.io is a much more active project based on PowerShell,
which provides the Get-DbaDbTable and Export-DbaDbTableData cmdlets to achieve this:

> Install-Module dbatools -Scope CurrentUser

Get-DbaDbTable -SqlInstance sql2016 -Database MyDatabase -Table 'dbo.Table1', 'dbo.Table2' |
	Export-DbaDbTableData -Path C:\temp\export.sql


Example: 1

PS C:\> Get-DbaDbTable -SqlInstance sql2017 -Database AdventureWorks2014 -Table EmployeePayHistory | Export-DbaDbTableData

Exports data from EmployeePayHistory in AdventureWorks2014 in sql2017

Example: 2

PS C:\> Get-DbaDbTable -SqlInstance sql2017 -Database AdventureWorks2014 -Table EmployeePayHistory | Export-DbaDbTableData -Path C:\temp\export.sql -Append

Exports data from EmployeePayHistory in AdventureWorks2014 in sql2017 using a trusted connection - Will append the output to the file C:\temp\export.sql if it already exists
Script does not include Batch Separator and will not compile

Example: 3

PS C:\> Get-DbaDbTable -SqlInstance sql2016 -Database MyDatabase -Table 'dbo.Table1', 'dbo.Table2' -SqlCredential sqladmin | Export-DbaDbTableData -Path C:\temp\export.sql

Exports only data from 'dbo.Table1' and 'dbo.Table2' in MyDatabase to C:\temp\export.sql and uses the SQL login "sqladmin" to login to sql2016



Error:
Powershell - The certificate chain was issued by an authority that is not trusted (dbatools)

Option 1. Go back to an older version of dbatools like 1.1.145

uninstall-module dbatools -force -verbose
install-module -name dbatools -requiredversion 1.1.145

Option 2. You want to keep your current version and get this fixed for your script only hence add the following at the beginning of your script

Set-DbatoolsInsecureConnection -SessionOnly

Option 3. As dbatools suggested, set DbaToolsConfig to use the old settings

Set-DbatoolsConfig -FullName sql.connection.trustcert -Value $true -Register
Set-DbatoolsConfig -FullName sql.connection.encrypt -Value $false -Register



$server = Connect-DbaInstance `
    -SqlInstance 'yourMachine.domain.com' `
    -Database 'YourDb' `
    -TrustServerCertificate;
# add credentials using -SqlCredential

Backup-DbaDatabase -SqlInstance $server.....



-------------------------------------------------------------------------------------------------------------------------------
# https://www.mssqltips.com/sqlservertip/5913/mssqlscripter-tool-and-examples-to-generate-scripts-for-sql-server-objects/


## Case 1: Script out SQL Server tables with wildcard characters for names


select schema_name(schema_id) as [schema], name
from sys.tables
where name like 'Customer%'
order by name

Mssql-scripter does not support wildcard values for the parameters,
i.e. I cannot do the following for [--include-objects] parameter:

	mssql-scripter .\sql2016 -d WildWorldImporters --include-objects 'Sales.Customer%'


We will use sqlcmd to find all tables were name like 'Customer%' and get the result into the mssql-scripter [--include-objects] parameter.

Here is the one-line script (we assume all the scripts will be written to one file called customer_tbl.sql):

CMD:

for /F "usebackq skip=2" %t in (`sqlcmd -S .\sql2016 -d WideWorldImporters -Q "set nocount on; select schema_name(schema_id)+'.'+name from sys.tables where name like 'customer%' and schema_id=schema_id('sales')"`) do mssql-scripter -S .\sql2016 -d WideWorldImporters --include-objects %t >> c:\test\customer_tbl.sql

for /F "usebackq skip=2" %t in
	(`sqlcmd -S .\sql2016 -d WideWorldImporters
		-Q "set nocount on; select schema_name(schema_id)+'.'+name from sys.tables where name like 'customer%' and schema_id=schema_id('sales')"`)
	do mssql-scripter -S .\sql2016 -d WideWorldImporters --include-objects %t >> c:\test\customer_tbl.sql


    The "usebackq" option means that we will use back quote ` to indicate the content is a command line to be executed, in this case it is the sqlcmd command.
    The "skip=2" option means we will skip the first two records returned from the command result.
        We know when we run any query like "select * from MyTable" with sqlcmd, the first two records will be the column names (first record) followed by a dash line (second record), like the following (I highlighted the first two records).


## Case 2: Script out a subset of records from one SQL Server table

Sometimes you do not need all the records from a table, for example, you may only need records for a specific day or for a specific user. So, to generate a script for these records, we cannot use mssql-scripter utility directly, but we can make this into three tasks.

    Use select .. into to dump the data to a temporary table in TempDB
    Use mssql-scripter utility to generate the script from the table in TempDB
    Use sqlcmd utility to drop the temporary table created from step 1 in Tempdb

So, let's say we want to generate a script for the first 5 records from the Sales.CustomerCategory table, we can use the following command lines.

	sqlcmd -S .\sql2016 -d WideWorldImporters -Q "select top 5 * into tempdb.dbo.CustomerCategories from sales.CustomerCategories"

	mssql-scripter -S .\sql2016 -d tempdb --include-objects dbo.CustomerCategories --data-only -f c:\test\CustCat_top5.sql --exclude-use-database

	sqlcmd -S .\sql2016 -d TempDB -Q "drop table dbo.CustomerCategories"


## Case 3: Script out SQL Server indexes on a table

The mssql-scripter utility currently cannot script out indexes or table triggers directly, indexes/triggers are scripted out together with the host tables. But I often need to script out indexes for various reasons, and I usually rely on PowerShell and SMO to do the work. But actually, with the mssql-scripter utility and with some command line utilities, we can do the same thing. This is very handy for people who do not want to bother to learn SMO.

The basic algorithm is as follows:

    Generate a script for table creation including indexes creation
    Generate a script for table creation without any index creation
    Count the lines of the script in step 2, say the line count is [X]
    Remove top [X] lines from script in step 1, what remains will be the index creation script.

We will rely on Windows commands to do the task.

Step 1: generate the table creation script (indexes included), c:\test\customer.sql.

mssql-scripter -S .\sql2016 -d WideWorldImporters --include-objects sales.customers --exclude-check-constraints --exclude-foreign-keys --exclude-extended-properties --exclude-defaults -f c:\test\customer.sql


Step 2: generate the table creation script (just the table itself without index creation).

mssql-scripter -S .\sql2016 -d WideWorldImporters --include-objects sales.customers --exclude-check-constraints --exclude-foreign-keys --exclude-extended-properties --exclude-defaults --exclude-indexes -f c:\test\customer_tbl.sql


Step 3: count the lines of the script in c:\test\customer_tbl.sql

for /f "usebackq" %x in (`find /v /c "" ^<c:\test\customer_tbl.sql`) do @echo %x && set LOC=%x

This command displays the lines of code via @echo %x and then sets the environment variable LOC to be %x. Here is the result:
demo of case 3

In this command, we use the Windows command FIND to count the number of lines.

If I open the c:\test\custmer_tbl.sql in SSMS, I can see the total lines is indeed 54 as shown below.

53 )
54 GO
55

Step 4: remove the top 54 lines from c:\test\customer.sql.

more +%LOC% < c:\test\customer.sql > c:\test\cust_idx.sql			

Here %LOC% has the value of 54 as [LOC] variable is defined in step 3.

-------------------------------------------------------------------------------------------------------------------------------

