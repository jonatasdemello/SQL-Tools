<?xml version="1.0"?>
<project name="tSQLt" default="all" basedir=".">

 <target name="all" depends="deploy.all, validate.tSQLt, validate.Example" />
 
 <target name="deploy.all" depends="reset.parameter.variables, hello, init, create.tSQLt.scripts, create.Example.scripts, deploy.tSQLt, deploy.Example" />

 <target name="hello" description="announcement">
  <loadfile
    failonerror="true"
    file="output/Version.txt"
    property="clr.version"
   />
  <property name="clr.version" value="${string::trim(clr.version)}" />

  <echo message="Validating tSQLt build." />
  <echo message="Target SQL Server version: ${db.version}" />
  <echo message="tSQLt build version is: [V${clr.version}]" />
  <echo message="db.server: ${db.server}" />
  <echo message="db.name: ${db.name}" />
 </target>

 <target name="reset.parameter.variables">
  <property name="append.source" value="" />
  <property name="append.target" value="" />
  <property name="append.file.content" value="" />
  <property name="execute.sql.elevated" value="false" />
  <property name="execute.sql.outputfile" value="" />
  <property name="execute.sql.filename" value="" />
  <property name="execute.sql.statement" value="" />
  <property name="execute.sql.database" value="" />
  <property name="deployandrun.tests.filename" value="" />
  <property name="deployandrun.tests.elevated" value="false" />
  <property name="deployandrun.tests.outputfile" value="" />
 </target>

 <!--=======================================================================-->
 <!--========               initialize artifact files              =========-->
 <!--=======================================================================-->

 <target name="init" description="prepare directories for tSQLt build">
  <delete dir="temp"/>
  <mkdir dir="temp"/>

  <unzip zipfile="output/tSQLt.zip" todir="temp" />
  <unzip zipfile="output/tSQLt.tests.zip" todir="temp" />

  <property name="execute.sql.elevated" value="false" />
  <property name="deployandrun.tests.elevated" value="false" />

 </target>

 <target name="append.file" description="append one sql file to another">
  <echo message="append:${append.source}" />
  <loadfile file="${append.source}" property="append.file.content" />
  <echo message="${append.file.content}" file="${append.target}" append="true"/>
  <echo message="${environment::newline()}${environment::newline()}GO${environment::newline()}${environment::newline()}" file="${append.target}" append="true" />
 </target>

 <target name="create.tSQLt.scripts" description="generate database creation scripts">
  <delete file="temp/temp_create_db.sql" />
  <property name="append.target" value="temp/temp_create_db.sql" />
  <property name="append.source" value="temp/CreateBuildDb.sql" />
  <call target="append.file" />

  <delete file="temp/temp_executeas.sql" />
  <property name="append.target" value="temp/temp_executeas.sql" />
  <property name="append.source" value="temp/ExecuteAs(tSQLt.Build).sql" />
  <call target="append.file" />
  <property name="append.source" value="temp/ChangeDbAndExecuteStatement(tSQLt.Build).sql" />
  <call target="append.file" />

  <delete file="temp/temp_executeas_sa.sql" />
  <property name="append.target" value="temp/temp_executeas_sa.sql" />
  <property name="append.source" value="temp/ExecuteAs(tSQLt.Build.SA).sql" />
  <call target="append.file" />
  <property name="append.source" value="temp/ChangeDbAndExecuteStatement(tSQLt.Build).sql" />
  <call target="append.file" />

  <delete file="temp/AllTests.Main.sql" />
  <property name="append.target" value="temp/AllTests.Main.sql" />
  <property name="append.source" value="temp/TestUtil.sql" />
  <call target="append.file" />
  <property name="append.source" value="temp/AllTests.sql" />
  <call target="append.file" />

  <if test="${db.version=='2008' or db.version=='2008R2' or db.version=='2012' or db.version=='2014'}">
   <property name="append.source" value="temp/AllTests.2008.sql" />
   <call target="append.file" />
  </if>

  <if test="${db.version=='2012' or db.version=='2014'}">
   <property name="append.source" value="temp/AllTests.2012.sql" />
   <call target="append.file" />
  </if>

  <if test="${db.version=='2014'}">
   <property name="append.source" value="temp/AllTests.2014.sql" />
   <call target="append.file" />
  </if>

 </target>
 
 <target name="create.Example.scripts" description="generate database creation scripts">
  <delete file="temp/temp_create_example.sql" />
  <property name="append.target" value="temp/temp_create_example.sql" />
  <property name="append.source" value="temp/Example.sql" />
  <call target="append.file" />
  <property name="append.source" value="temp/TestThatExamplesAreDeployed.sql" />
  <call target="append.file" />

 </target>

 <!--=======================================================================-->
 <!--========                   create database                    =========-->
 <!--=======================================================================-->

 <target name="execute.sql.statement_or_file">
  <choose>
   <when test="${execute.sql.elevated == 'true'}">
    <property name="execute.sql.executeas" value="temp/temp_executeas_sa.sql" />
   </when>
   <otherwise>
    <property name="execute.sql.executeas" value="temp/temp_executeas.sql" />
   </otherwise>
  </choose>
  <choose>
   <when test="${property::exists('db.user')}">
    <property name="execute.sql.sqlconnect" value="-S&quot;${db.server}&quot; -U&quot;${db.user}&quot; -P&quot;${db.password}&quot;" />
   </when>
   <otherwise>
    <property name="execute.sql.sqlconnect" value="-S&quot;${db.server}&quot; -E" />
   </otherwise>
  </choose>
  <property name="execute.sql.sqlcmd" value="sqlcmd ${execute.sql.sqlconnect} -I -i &quot;${execute.sql.executeas}&quot; ${execute.sql.filename} -v NewDbName=${db.name} DbName=${execute.sql.database} ExecuteStatement=&quot;${execute.sql.statement}&quot; -V11" />
  <echo message="${execute.sql.sqlcmd}" />
  <exec program="cmd" failonerror="true">
   <arg value="/c"/>
   <arg value="${execute.sql.sqlcmd}"/>
   <arg value=" > &quot;${execute.sql.outputfile}&quot;" if="${execute.sql.outputfile!=''}" />
  </exec>
  <property name="execute.sql.outputfile" value="" />
  <property name="execute.sql.elevated" value="false" />
 </target>

 <target name="execute.sql.file">
  <echo message="${execute.sql.filename}" />
  <if test="${not property::exists('execute.sql.statement')}">
   <property name="execute.sql.statement" value="" />
  </if>
  <property name="temp.execute.sql.statement" value="${execute.sql.statement}" />
  <property name="execute.sql.statement" value="" />
  <property name="temp.execute.sql.filename" value="${execute.sql.filename}" />
  <property name="execute.sql.filename" value="&quot;${execute.sql.filename}&quot;" />
  <call target="execute.sql.statement_or_file" />
  <property name="execute.sql.statement" value="${temp.execute.sql.statement}" />
  <property name="execute.sql.filename" value="${temp.execute.sql.filename}" />
 </target>
 
 <target name="execute.sql.statement" description="execute create scripts and run the tests">
  <echo message="${execute.sql.statement}" />
  <if test="${not property::exists('execute.sql.filename')}">
   <property name="execute.sql.filename" value="" />
  </if>
  <property name="temp.execute.sql.filename" value="${execute.sql.filename}" />
  <property name="execute.sql.filename" value="" />
  <call target="execute.sql.statement_or_file" />
  <property name="execute.sql.filename" value="${temp.execute.sql.filename}" />
 </target>

 <target name="execute.sql.tests">
  <property name="temp.execute.sql.outputfile" value="${execute.sql.outputfile}" />
  <property name="temp.execute.sql.filename" value="${execute.sql.filename}" />
  <property name="temp.execute.sql.statement" value="${execute.sql.statement}" />

  <property name="execute.sql.outputfile" value="" />
  <call target="execute.sql.statement" />

  <property name="execute.sql.outputfile" value="${temp.execute.sql.outputfile}" />
  <property name="execute.sql.filename" value="temp/GetTestResults.sql" />
  <call target="execute.sql.file" />

  <property name="execute.sql.outputfile" value="" />
  <property name="execute.sql.filename" value="temp/GetFailedTestCount.sql" />
  <call target="execute.sql.file" />

  <property name="execute.sql.outputfile" value="" />
  <property name="execute.sql.filename" value="${temp.execute.sql.filename}" />
  <property name="execute.sql.statement" value="${temp.execute.sql.statement}" />
 </target>


 <target name="deploy.tSQLt" description="execute create scripts">
  <echo message="##teamcity[progressMessage 'Deploying tSQLt']" />
  <call target="reset.parameter.variables" />

  <property name="execute.sql.database" value="tempdb" />
  <property name="execute.sql.filename" value="temp/temp_create_db.sql" />
  <call target="execute.sql.file" />

  <property name="execute.sql.database" value="${db.name}" />
  <property name="execute.sql.filename" value="temp/tSQLt.class.sql" />
  <call target="execute.sql.file" />
 </target>


 <target name="deployandrun.tests" description="deploy and run one tests file">
  <property name="execute.sql.database" value="${db.name}" />
  <property name="execute.sql.outputfile" value="" />
  <property name="execute.sql.statement" value="EXEC tSQLt.Reset;" />
  <call target="execute.sql.statement" />

  <property name="execute.sql.elevated" value="true" />
  <property name="execute.sql.filename" value="${deployandrun.tests.filename}" />
  <call target="execute.sql.file" />

  <property name="execute.sql.elevated" value="${deployandrun.tests.elevated}" />
  <property name="execute.sql.outputfile" value="${deployandrun.tests.outputfile}" />
  <property name="execute.sql.statement" value="EXEC tSQLt.SetVerbose @Verbose = 1;EXEC tSQLt.RunNew;" />
  <call target="execute.sql.tests" />

  <property name="deployandrun.tests.elevated" value="false" />
 </target>


 <target name="validate.tSQLt" description="run the tests">
  <echo message="##teamcity[progressMessage 'Validating tSQLt']" />

  <call target="reset.parameter.variables" />
  <property name="execute.sql.database" value="${db.name}" />

  <!-- prepare master -->
  <property name="execute.sql.elevated" value="true" />
  <property name="execute.sql.filename" value="temp/Drop(master.tSQLt_testutil).sql" />
  <call target="execute.sql.file" />

  <property name="execute.sql.elevated" value="true" />
  <property name="execute.sql.filename" value="temp/Install(master.tSQLt_testutil).sql" />
  <call target="execute.sql.file" />

  <property name="execute.sql.elevated" value="true" />
  <property name="execute.sql.filename" value="temp/Drop(tSQLtExternalAccessKey).sql" />
  <call target="execute.sql.file" />

  <!-- run bootstrap tests -->
  <property name="execute.sql.filename" value="temp/BootStrapTest.sql" />
  <call target="execute.sql.file" />

  <!-- run non-specific tests -->
  <property name="deployandrun.tests.filename" value="temp/AllTests.Main.sql" />
  <property name="deployandrun.tests.outputfile" value="output/TestResults.xml" />
  <call target="deployandrun.tests" />
 
  <!-- run SA tests -->
  <property name="deployandrun.tests.elevated" value="true" />
  <property name="deployandrun.tests.filename" value="temp/AllTests.SA.sql" />
  <property name="deployandrun.tests.outputfile" value="output/TestResults_SA.xml" />
  <call target="deployandrun.tests" />

  <!-- create EXTERNAL_ACCESS key -->
  <property name="execute.sql.elevated" value="true" />
  <property name="execute.sql.filename" value="temp/Install(tSQLtExternalAccessKey).sql" />
  <call target="execute.sql.file" />

  <!-- EAKE Tests -->
  <property name="deployandrun.tests.elevated" value="true" />
  <property name="deployandrun.tests.filename" value="temp/AllTests.EXTERNAL_ACCESS_KEY_EXISTS.sql" />
  <property name="deployandrun.tests.outputfile" value="output/TestResults_EXTERNAL_ACCESS_KEY_EXISTS.xml" />
  <call target="deployandrun.tests" />

  <!-- Enable EA -->
  <property name="execute.sql.elevated" value="true" />
  <property name="execute.sql.filename" value="temp/EnableExternalAccess.sql" />
  <call target="execute.sql.file" />

  <!-- EA Tests -->
  <property name="deployandrun.tests.filename" value="temp/AllTests.EXTERNAL_ACCESS.sql" />
  <property name="deployandrun.tests.outputfile" value="output/TestResults_EXTERNAL_ACCESS.xml" />
  <call target="deployandrun.tests" />

  <!-- cleanup master -->
  <property name="execute.sql.elevated" value="true" />
  <property name="execute.sql.filename" value="temp/Drop(master.tSQLt_testutil).sql" />
  <call target="execute.sql.file" />

 </target>

 <target name="deploy.Example" description="execute create scripts">
  <echo message="##teamcity[progressMessage 'Deploying Example']" />
  <call target="reset.parameter.variables" />

  <property name="execute.sql.database" value="tempdb" />
  <property name="execute.sql.filename" value="temp/temp_create_example.sql" />
  <call target="execute.sql.file" />
 </target>

 <target name="validate.Example" description="run the tests">
  <echo message="##teamcity[progressMessage 'Validating Example']" />
  <call target="reset.parameter.variables" />

  <property name="execute.sql.database" value="tSQLt_Example" />
  <property name="execute.sql.outputfile" value="output/ExampleTestResults.xml" />
  <property name="execute.sql.statement" value="PRINT DB_NAME();EXEC tSQLt.Run 'ExampleDeployed';" />
  <call target="execute.sql.tests" />

 </target>

</project>
